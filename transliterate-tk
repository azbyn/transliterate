#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk
from icu import UnicodeString, Transliterator
import sys
import clipboard

# config
_font = ("DejaVu Sans Mono", 12)
_txt_color = "#E0E0E0"
_alpha = 1
_bg = "#1D1F21"
_selected_bg = "#B4B7B4"
_selected_fg = "#1D1F21"


# they're not teeechnically languages, but that's a straight-forward name
languages = [
    ("Russian",     "Latin-Russian/BGN"),
    ("Ukrainian",   "Latin-Russian/BGN"),
    # old church slavonic
    ("OCS",         "Latin-Russian/BGN"),

    
    ("Hiragana",    "Latin-Hiragana"),
    ("Katakana",    "Latin-Katakana"),
    ("Latin",       "Russian-Latin/BGN; Greek-Latin/UNGEGN; Latin"),
    ("Greek",       "Latin-Greek/UNGEGN"),
]

languages_dict = { language: code for language, code in languages }

# state
_transliterator = None
_current_language_idx = 0

def change_language(idx):
    global _transliterator, _current_language_idx
    _current_language_idx = idx
    l = languages[idx][0]
    _transliterator = Transliterator.createInstance(languages_dict[l])


    # TODO fix update
def greek_pre(string):
    string = (string
              .replace("w", "ω")
              .replace("W", "Ω")
              .replace("ö", "ω")
              .replace("Ö", "Ω")
              .replace("b", "β")
              .replace("B", "Β")
              
              .replace("x", "ξ")
              .replace("X", "Ξ")

              .replace("ę", "η")
              .replace("Ę", "Η")
              
              .replace("q", "ϙ")
              .replace("Q", "Ϙ")

              # digamma
              .replace("Â", "Ϝ")
              .replace("â", "ϝ")

              .replace("Ł", "Ϝ")
              .replace("ł", "ϝ")
              
             )
    return string

def cyrilic_pre(string):
    return string

def ukrainian_pre(string):
    string = cyrilic_pre(string)
    string = (string
             .replace("yi", "ї")
             .replace("ji", "ї")
             .replace("YI", "Ї")
             .replace("JI", "Ї")

             .replace("Yi", "Ї")
             .replace("Ji", "Ї")

             .replace("i", "і")
             .replace("I", "І")

             .replace("î", "и")
             .replace("Î", "И")

             .replace("ye", "є")
             .replace("YE", "Є")
             .replace("Ye", "Є")

             .replace("je", "є")
             .replace("JE", "Є")
             .replace("Je", "Є")
             )
    return string

def ocs_pre(string): #ocs is similar to ukrainian
    string = (string
              .replace("dz", "ꙃ")
              .replace("Dz", "Ꙃ")
              .replace("DZ", "Ꙃ")

              # special dz
              .replace("dż", "ѕ")
              .replace("Dż", "Ѕ")
              .replace("DŻ", "Ѕ")
              .replace("dź", "ѕ")
              .replace("Dź", "Ѕ")
              .replace("DŹ", "Ѕ")

              # ot
              .replace("öt", "ѿ")
              .replace("Öt", "Ѿ")
              .replace("ÖT", "Ѿ")

              .replace("ö", "ѡ")
              .replace("Ö", "Ѡ")

              # ks
              .replace("x", "ѯ")
              .replace("X", "Ѯ")

              # ps
              .replace("ps", "ѱ")
              .replace("Ps", "Ѱ")
              .replace("PS", "Ѱ")

              # th
              .replace("th", "ѳ")
              .replace("Th", "Ѳ")
              .replace("TH", "Ѳ")

              # weird stuff
              .replace("ü", "ѵ")
              .replace("Ü", "Ѵ")

              .replace("q", "ҁ")
              .replace("Q", "Ҁ")

              # romanian stuff
              .replace("Â", "Ꙟ")
              .replace("â", "ꙟ")

              .replace("đż", "џ")
              .replace("đż", "Џ")

              # misc
              .replace("ł", "ў")
              .replace("Ł", "Ў")

              # ae
              .replace("ae", "ѣ")
              .replace("Ae", "Ѣ")
              .replace("AE", "Ѣ")
              .replace("ě", "ѣ")
              .replace("Ě", "Ѣ")
              
              )
    string = ukrainian_pre(string)
    string = (string
              .replace("dz", "ꙃ")
              .replace("Dz", "Ꙃ")
              .replace("DZ", "Ꙃ")
              )
    return string

def russian_pre(string):
    string = cyrilic_pre(string)
    string = (string
              .replace("ö", "ё")
              .replace("ę", "э")
              .replace("Ę", "Э")
              .replace("Ö", "Ё")
              .replace("yo", "ё")
              .replace("Yo", "Ё")
              .replace("YO", "Ё")

              .replace("î", "ы")
              .replace("Î", "Ы")
              )
    return string

def cyrilic_post(string):
    string = (string
        .replace("c", "ц")
        .replace("C", "Ц")

        .replace("ü", "ю")
        .replace("Ü", "Ю")

        .replace("w", "в")
        .replace("W", "В")

        .replace("x", "кс")
        .replace("X", "КС")

        .replace("'", "ь")
        .replace("\"", "ъ")
        .replace("ă", "ъ")
        .replace("Ă", "Ъ")

        .replace("â", "ы")
        .replace("Â", "Ы")
              
        .replace("ż", "ж")
        .replace("ž", "ж")
        .replace("ź", "ж")

        .replace("Ż", "Ж")
        .replace("Ž", "Ж")
        .replace("Ź", "Ж")

        .replace("j", "й")
        .replace("J", "Й")

        .replace("ș", "ш").replace("Ș", "Ш")
        .replace("ś", "ш").replace("Ś", "Ш")
        .replace("š", "щ").replace("Š", "щ")
        .replace("ć", "ч").replace("Ć", "ч")
        .replace("č", "ч").replace("Č", "ч")
        .replace("ț", "ц")
        .replace("Ț", "Ц")
        )
    return string
def russian_post(string):
    string = cyrilic_post(string)
    string = (string
              .replace("h", "х")
              .replace("H", "х")

              .replace("h", "х")
              .replace("H", "х")
              )

    return string

def ukrainian_post(string):
    string = cyrilic_post(string)
    string = (string
              .replace("г", "ґ")
              .replace("Г", "Ґ")

              .replace("э", "е")
              .replace("Э", "Е")

              .replace("Ы", "И")
              .replace("ы", "и")

              .replace("h", "г")
              .replace("H", "Г")
              )

    return string
def ocs_post(string):
    string = (string
              .replace("з", "ꙁ")
              .replace("З", "Ꙁ")
              
              .replace("â", "ꙑ")
              .replace("Â", "Ꙑ")


              
              # .replace("ż", "з")
              # .replace("Ż", "З")

              .replace("ź", "з")
              .replace("Ź", "З"))
    string = cyrilic_post(string)
    string = (string

              .replace("є", "ѥ")
              .replace("Є", "Ѥ")
              
              .replace("э", "є")
              .replace("Э", "Є")


              .replace("Ы", "Ꙑ")
              .replace("ы", "ꙑ")

              .replace("đ", "ꙉ")
              .replace("Đ", "Ꙉ")


              # ou
              
              .replace("ō", "ꙋ")
              .replace("Ō", "Ꙋ")

              # ya
              .replace("я", "ꙗ")
              .replace("Я", "Ꙗ")

              # nasal stuff
              .replace("йą", "ѭ")
              .replace("Йą", "Ѭ")
              .replace("ЙĄ", "Ѭ")
              
              .replace("ą", "ѫ")
              .replace("Ą", "Ѫ")


              .replace("йę", "ѩ")
              .replace("Йę", "ѩ")
              .replace("ЙĘ", "ѩ")
              
              .replace("ę", "ѧ")
              .replace("Ę", "Ѧ")


              

              # palatisation
              .replace("ń", "\u0484")
              .replace("Ń", "\u0484")

              # numbers
              .replace("ñ", "\u0483")
              .replace("Ñ", "\u0483")

              # punctiation
              .replace(".", "·")
              .replace(";", "⁙")
              .replace(":", "჻")

              .replace("?", ";")

              


                             



              # .replace("h", "г")
              # .replace("H", "Г")
              )

    return string

def transliterate_string(input):
    lang = languages[_current_language_idx][0]

    if lang == "Greek":
        input = greek_pre(input)
    elif lang == "Ukrainian":
        input = ukrainian_pre(input)
    elif lang == "OCS":
        input = ocs_pre(input)
    elif lang == "Russian":
        input = russian_pre(input)

    res = _transliterator.transliterate(input)

    if lang == "Russian":
        res = russian_post(res)
    elif lang == "Ukrainian":
        res = ukrainian_post(res)
    if lang == "OCS":
        # old church slavonic
        res = ocs_post(res)

    #no more mongolian vowel separator (for тс) and stuff
    res = res.replace("\u180e", "")
    return res# s + "-oi"

def on_quit(out_str):
    if len(out_str) == 0:
        return
    clipboard.copy(out_str)

def main():
    # please don't start the class_name with a capital letter
    class_name = "transliterate"
    # the minimum amount of code to make this work from awesomewm
    if len(sys.argv) >= 3 and sys.argv[1] == "-name":
        class_name = sys.argv[2]



    root = tk.Tk(className=class_name)
    root.wm_protocol("WM_CLASS", class_name)
    root.title("Transliterate")
    root.geometry("700x120")


    if _alpha < 1:

        root.wait_visibility(root)
        root.wm_attributes("-alpha", _alpha)


    in_var = tk.StringVar()
    out_var = tk.StringVar()


    def callback(*args):
        value = in_var.get()
        out_var.set(transliterate_string(value))

    def enter(*args):
        on_quit(transliterate_string(in_var.get()))
        root.quit()

    def on_change_language(idx):
        if idx < 0:
            idx = len(languages) - 1
        elif idx >= len(languages):
            idx = 0

        for _, b in buttons.items():
            b.state = tk.NORMAL
            b["bg"] = _bg
            b["fg"] = _txt_color

        b = buttons[idx]
        b.state = tk.DISABLED
        b["bg"] = _selected_bg
        b["fg"] = _selected_fg

        change_language(idx)
        callback()

    in_var.trace_add("write", callback)


    frame = tk.Frame(root)
    frame.pack(fill=tk.X, expand=True)

    buttons = {}
    i = 0
    for l,_ in languages:
        def m(n):
            return lambda: on_change_language(n)
        btn = tk.Button(frame, text=l,
                        command=m(l))

        btn.grid(row=0, column=i, sticky="nesw")
        frame.grid_columnconfigure(i, weight=1, uniform="column")
        buttons[i] = btn
        i += 1

    txt = tk.Entry(root, textvariable=in_var, font=_font, #bg=_bg,
                   insertbackground=_txt_color, fg=_txt_color)


    txt.pack(fill=tk.X, expand=True)
    txt.focus()

    output = tk.Label(root, textvariable=out_var, font=_font,
                      fg=_txt_color, anchor="w")

    output.pack(fill=tk.X, expand=True)


    txt.bind('<Return>',enter)
    txt.bind('<Up>',   lambda *_: on_change_language(_current_language_idx+1))
    txt.bind('<Down>', lambda *_: on_change_language(_current_language_idx-1))

    on_change_language(_current_language_idx)

    root.mainloop()


if __name__ == "__main__":
    main()
